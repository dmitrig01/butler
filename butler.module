<?php

class ButlerContext {
  protected $cache = array();
  protected $handlers;
  protected $handler_objects = array();
  function get($selector) {
    // Just do a quick one-off caching to catch most cases.
    if (isset($this->cache[$selector])) {
      return $this->cache[$selector];
    }

    $parts = explode(':', $selector);
    $ancestors = array();
    for ($i = 0; $i <= count($parts); $i++) {
      $current = array();
      $children = array();
      for ($j = 0; $j < count($parts); $j++) {
        if ($j < $i) {
          $current[] = $parts[$j];
        }
        else {
          $children[] = $parts[$j];
        }
      }
      $ancestors[implode(':', $current)] = $children;
    }

    $ancestors = array_reverse($ancestors);

    foreach ($ancestors as $ancestor => $children) {
      if ($handler = $this->handler($ancestor)) {
        $this->cache[$ancestor] = $handler->get($children);
        return $this->cache[$ancestor];
      }
    }
  }

  function set($selector, $value) {
    if (is_string($value)) {
      $this->cache[$selector] = $value;
    }
    elseif (is_object($value)) {
      $this->handlers[$selector] = TRUE;
      $this->handler_objects[$selector] = $value;
    }
  }

  protected function handler($selector) {
    if (!isset($this->handlers)) {
      $this->handlers = module_invoke_all('butler');
    }
    if (!isset($this->handlers[$selector])) {
      return FALSE;
    }
    if (!isset($this->handler_objects[$selector])) {
      $this->handler_objects[$selector] = new $this->handlers[$selector]();
    }
    return $this->handler_objects[$selector];
  }
}

abstract class ButlerContextItem {
  abstract function get($parts);
}

function butler_context() {
  static $context;
  if (!isset($context)) {
      $context = new ButlerContext();
  }
  return $context;
}

function butler_butler() {
  return array(
    'http' => 'ButlerContextHTTP',
    'conf' => 'ButlerContextConf',
    'user' => 'ButlerContextUser',
  );
}
